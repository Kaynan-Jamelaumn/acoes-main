# Generated by Django 5.0 on 2023-12-20 12:33

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('name', models.CharField(max_length=150, primary_key=True, serialize=False, unique=True)),
                ('region', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'user with the same username already exists'}, max_length=150, unique=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_users', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=250)),
                ('complemento', models.CharField(blank=True, max_length=250, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.city')),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('name', models.CharField(max_length=250, primary_key=True, serialize=False, unique=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.address')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('shifit', models.CharField(choices=[('Morning', 'Morning'), ('Afternoon', 'Afternoon'), ('Night', 'Night'), ('Full-time', 'Full-time')], max_length=10)),
                ('type', models.CharField(choices=[('Integrated Technical', 'Integrated Technical'), ('Subsequent Technical', 'Subsequent Technical'), ('Degree ', 'Degree '), ('Postgraduate ', 'Postgraduate'), ('Extension  ', 'Extension'), ('Youth and Adult Education (EJA) ', 'EJA')], max_length=32)),
                ('time_required', models.IntegerField()),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.institute')),
            ],
        ),
        migrations.CreateModel(
            name='PreviousSchool',
            fields=[
                ('name', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('completion_date', models.DateField()),
                ('type', models.CharField(choices=[('Private', 'Private'), ('Public', 'Public')], max_length=10)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.address')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('social_name', models.CharField(blank=True, max_length=150, null=True)),
                ('mother_name', models.CharField(max_length=150)),
                ('father_name', models.CharField(blank=True, max_length=150, null=True)),
                ('birth_date', models.DateField()),
                ('registration', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=6, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Woman', 'Woman'), ('Man', 'Man'), ('Non-binary', 'Non-binary'), ('Genderfluid', 'Genderfluid'), ('Other', 'Other')], max_length=30, null=True)),
                ('disability', models.CharField(blank=True, choices=[('None', 'None'), ('Deafness', 'Deafness'), ('Visual Impairment', 'Visual Impairment'), ('Physical Disability', 'Physical Disability'), ('Autism/Spectrum Disorder', 'Autism/Spectrum Disorder'), ('Down Syndrome', 'Down Syndrome'), ('Dyslexia', 'Dyslexia'), ('Attention Deficit Hyperactivity Disorder (ADHD)', 'ADHD'), ('Deafness', 'Deafness'), ('Low Vision', 'Low Vision'), ('Deafblindness', 'Deafblindness'), ('Multiple Disabilities', 'Multiple Disabilities'), ('Other', 'Other')], max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.address')),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.institute')),
                ('previous_school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.previousschool')),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('admission_process', models.CharField(blank=True, choices=[(' Self-declared Black, Brown, and Indigenous (BBI)', ' Self-declared Black, Brown, and Indigenous (BBI)'), ('Income up to 1.5 times the minimum wage per capita', 'Income up to 1.5 times the minimum wage per capita'), ('Income greater than 1.5 up to 3 times the minimum wage per capita', 'Income greater than 1.5 up to 3 times the minimum wage per capita'), ('for People with Disabilities (PWD):', 'for People with Disabilities (PWD):'), ('Public School', 'Public School'), ('Public School + Income up to 1.5 times the minimum wage per capita', 'Public School + Income up to 1.5 times the minimum wage per capita'), ('Public School + PWD + Income up to 1.5 times the minimum wage per capita', 'Public School + PWD + Income up to 1.5 times the minimum wage per capita'), ('Public School + PWD + BBI +  Income up to 1.5 times the minimum wage per capita', 'Public School + PWD + BBI + Income up to 1.5 times the minimum wage per capita'), ('Public School + BBI +  Income up to 1.5 times the minimum wage per capita', 'Public School + BBI + Income up to 1.5 times the minimum wage per capita'), ('Public School + PWD', 'Public School + PWD'), ('Public School + BBI', 'Public School + BBI'), ('Public School + PWD+ BBI', 'Public School + PWD + BBI'), ('BBI + PWD', 'BBI + PWD'), ('BBI + PWD  + Income up to 1.5 times the minimum wage per capita', 'BBI + PWD + Income up to 1.5 times the minimum wage per capita'), ('BBI + Income up to 1.5 times the minimum wage per capita', 'BBI + Income up to 1.5 times the minimum wage per capita'), ('PWD + Income up to 1.5 times the minimum wage per capita', 'PWD + Income up to 1.5 times the minimum wage per capita'), ('General competition', 'General competition')], max_length=79, null=True)),
                ('ingressed_semester', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Canceld', 'Canceld'), ('In Progress', 'In Progress'), ('Concluded', 'Concluded')], max_length=11)),
                ('current_semester', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.studentcourse')),
            ],
        ),
    ]
