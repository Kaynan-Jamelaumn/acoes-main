# Generated by Django 5.0.2 on 2024-04-02 18:07

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('name', models.CharField(max_length=150, primary_key=True, serialize=False, unique=True)),
                ('region', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'user with the same username already exists'}, max_length=150, unique=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_users', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=250)),
                ('complement', models.CharField(blank=True, max_length=250, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.city')),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('name', models.CharField(max_length=250, primary_key=True, serialize=False, unique=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.address')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('shift', models.CharField(choices=[('Matutino', 'Matutino'), ('Vespertino', 'Vespertino'), ('Noturno', 'Noturno'), ('Integral', 'Integral')], max_length=12)),
                ('modality', models.CharField(choices=[('Presencial', 'Presencial'), ('Híbrido', 'Híbrido'), ('A Distância', 'A Distância')], max_length=16)),
                ('type', models.CharField(choices=[('Educação de Jovens e Adultos (EJA)', 'EJA'), ('Técnico Integrado', 'Técnico Integrado'), ('Técnico Subsequente', 'Técnico Subsequente'), ('Tecnólogo', 'Tecnólogo'), ('Bacharelado', 'Bacharelado'), ('Licenciatura', 'Licenciatura')], max_length=34)),
                ('time_required', models.IntegerField()),
                ('year_created', models.IntegerField()),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.institute')),
            ],
        ),
        migrations.CreateModel(
            name='PreviousSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('type', models.CharField(choices=[('Comunitária', 'Comunitária'), ('Municipal', 'Municipal'), ('Estadual', 'Estadual'), ('Federal', 'Federal'), ('Privada', 'Privada'), ('Outra', 'Outra')], max_length=11)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.address')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('social_name', models.CharField(blank=True, max_length=150, null=True)),
                ('father_name', models.CharField(blank=True, max_length=150, null=True)),
                ('birth_date', models.DateField()),
                ('registration', models.IntegerField(blank=True, null=True, unique=True)),
                ('sex', models.CharField(blank=True, choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino')], max_length=10, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Mulher', 'Mulher'), ('Homem', 'Homem'), ('Não-binário', 'Não-binário'), ('Gênero Fluído', 'Gênero Fluído'), ('Outro', 'Outro')], max_length=30, null=True)),
                ('color_race', models.CharField(blank=True, choices=[('Mulher', 'Mulher'), ('Homem', 'Homem'), ('Não-binário', 'Não-binário'), ('Gênero Fluído', 'Gênero Fluído'), ('Outro', 'Outro')], max_length=30, null=True)),
                ('disability', models.CharField(blank=True, choices=[('Nenhum', 'Nenhum'), ('Surdez', 'Surdez'), ('Deficiência Visual', 'Deficiência Visual'), ('Deficiência Física', 'Deficiência Física'), ('Transtorno do Espectro Autista (TEA)', 'Transtorno do Espectro Autista (TEA)'), ('Síndrome de Down', 'Síndrome de Down'), ('Dislexia', 'Dislexia'), ('Transtorno de Déficit de Atenção e Hiperatividade (TDAH)', 'Transtorno de Déficit de Atenção e Hiperatividade (TDAH)'), ('Baixa Visão', 'Baixa Visão'), ('Surdocegueira', 'Surdocegueira'), ('Múltiplas Deficiências', 'Múltiplas Deficiências'), ('Outro', 'Outro')], max_length=56, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.address')),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.institute')),
                ('previous_school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.previousschool')),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission_process', models.CharField(blank=True, choices=[('Competição geral', 'Competição geral'), ('Auto-declarado Preto, Pardo e Indígena (PPI)', 'Auto-declarado Preto, Pardo e Indígena (PPI)'), ('Renda até 1,5 vezes o salário mínimo per capita', 'Renda até 1,5 vezes o salário mínimo per capita'), ('Renda maior que 1,5 até 3 vezes o salário mínimo per capita', 'Renda maior que 1,5 até 3 vezes o salário mínimo per capita'), ('para Pessoas com Deficiência (PCD):', 'para Pessoas com Deficiência (PCD):'), ('Escola Pública', 'Escola Pública'), ('Escola Pública + Renda até 1,5 vezes o salário mínimo per capita', 'Escola Pública + Renda até 1,5 vezes o salário mínimo per capita'), ('Escola Pública + PCD + Renda até 1,5 vezes o salário mínimo per capita', 'Escola Pública + PCD + Renda até 1,5 vezes o salário mínimo per capita'), ('Escola Pública + PCD + PPI + Renda até 1,5 vezes o salário mínimo per capita', 'Escola Pública + PCD + PPI + Renda até 1,5 vezes o salário mínimo per capita'), ('Escola Pública + PPI + Renda até 1,5 vezes o salário mínimo per capita', 'Escola Pública + PPI + Renda até 1,5 vezes o salário mínimo per capita'), ('Escola Pública + PCD', 'Escola Pública + PCD'), ('Escola Pública + PPI', 'Escola Pública + PPI'), ('Escola Pública + PCD + PPI', 'Escola Pública + PCD + PPI'), ('PPI + PCD', 'PPI + PCD'), ('PPI + PCD + Renda até 1,5 vezes o salário mínimo per capita', 'PPI + PCD + Renda até 1,5 vezes o salário mínimo per capita'), ('PPI + Renda até 1,5 vezes o salário mínimo per capita', 'PPI + Renda até 1,5 vezes o salário mínimo per capita'), ('PCD + Renda até 1,5 vezes o salário mínimo per capita', 'PCD + Renda até 1,5 vezes o salário mínimo per capita')], max_length=79, null=True)),
                ('ingressed_semester', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Cancelado', 'Cancelado'), ('Cancelado', 'Cancelado'), ('Cursando', 'Cursando'), ('Trancado', 'Trancado'), ('Concluído', 'Concluído'), ('Desconhecido', 'Desconhecido')], default='Desconhecido', max_length=12)),
                ('current_semester', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.studentcourse')),
            ],
        ),
    ]
